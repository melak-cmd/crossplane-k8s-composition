apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  labels:
    type: frontend
  name: app-frontend
spec:
  compositeTypeRef:
    apiVersion: melakcloud.com/v1alpha1
    kind: App
  mode: Pipeline
  pipeline:
    - step: patch-and-transform
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        environment: null
        kind: Resources
        patchSets:
          - name: metadata
            patches:
              - fromFieldPath: metadata.labels
                type: FromCompositeFieldPath
        resources:
          - base:
              apiVersion: kubernetes.crossplane.io/v1alpha1
              kind: ProviderConfig
              spec:
                credentials:
                  source: InjectedIdentity
            name: kubernetes
            patches:             
              - fromFieldPath: spec.id
                toFieldPath: spec.forProvider.manifest.metadata.name
                type: FromCompositeFieldPath 
              - fromFieldPath: metadata.annotations
                toFieldPath: spec.forProvider.manifest.metadata.annotations
                type: FromCompositeFieldPath       
            readinessChecks:
              - type: None
          - name: deployment
            base:
              apiVersion: kubernetes.crossplane.io/v1alpha1
              kind: Object
              spec:
                forProvider:
                  manifest:
                    apiVersion: apps/v1
                    kind: Deployment
                    spec:
                      template:
                        spec:
                          containers:
                            - livenessProbe:
                                httpGet:
                                  path: /
                                  port: 80
                              name: frontend
                              ports:
                                - containerPort: 80
                              readinessProbe:
                                httpGet:
                                  path: /
                                  port: 80
                              resources:
                                limits:
                                  cpu: 250m
                                  memory: 256Mi
                                requests:
                                  cpu: 125m
                                  memory: 128Mi
            
            patches:
              - fromFieldPath: spec.id
                toFieldPath: metadata.name
                transforms:
                  - string:
                      fmt: '%s-deployment'
                      type: Format
                    type: string
                type: FromCompositeFieldPath
              - fromFieldPath: spec.id
                toFieldPath: spec.forProvider.manifest.metadata.name
                type: FromCompositeFieldPath
              - fromFieldPath: spec.parameters.namespace
                toFieldPath: spec.forProvider.manifest.metadata.namespace
                type: FromCompositeFieldPath
              - fromFieldPath: spec.id
                toFieldPath: spec.forProvider.manifest.metadata.labels.app
                type: FromCompositeFieldPath
              - fromFieldPath: metadata.annotations
                toFieldPath: spec.forProvider.manifest.metadata.annotations
                type: FromCompositeFieldPath
              - fromFieldPath: spec.id
                toFieldPath: spec.forProvider.manifest.spec.selector.matchLabels.app
                type: FromCompositeFieldPath
              - fromFieldPath: spec.id
                toFieldPath: spec.forProvider.manifest.spec.template.metadata.labels.app
                type: FromCompositeFieldPath
              - fromFieldPath: spec.parameters.image
                toFieldPath: spec.forProvider.manifest.spec.template.spec.containers[0].image
                type: FromCompositeFieldPath
              - fromFieldPath: spec.parameters.port
                toFieldPath: spec.forProvider.manifest.spec.template.spec.containers[0].ports[0].containerPort
                type: FromCompositeFieldPath
              - fromFieldPath: spec.parameters.port
                toFieldPath: spec.forProvider.manifest.spec.template.spec.containers[0].livenessProbe.httpGet.port
                type: FromCompositeFieldPath
              - fromFieldPath: spec.parameters.port
                toFieldPath: spec.forProvider.manifest.spec.template.spec.containers[0].readinessProbe.httpGet.port
                type: FromCompositeFieldPath
              - fromFieldPath: spec.id
                toFieldPath: spec.providerConfigRef.name
                type: FromCompositeFieldPath
            readinessChecks:
              - type: None
          - base:
              apiVersion: kubernetes.crossplane.io/v1alpha1
              kind: Object
              spec:
                forProvider:
                  manifest:
                    apiVersion: v1
                    kind: Service
                    spec:
                      ports:
                        - name: http
                          port: 80
                          protocol: TCP
                          targetPort: 80
                      type: ClusterIP
            name: service
            patches:
              - fromFieldPath: spec.id
                toFieldPath: metadata.name
                transforms:
                  - string:
                      fmt: '%s-service'
                      type: Format
                    type: string
                type: FromCompositeFieldPath
              - fromFieldPath: spec.id
                toFieldPath: spec.forProvider.manifest.metadata.name
                type: FromCompositeFieldPath
              - fromFieldPath: spec.parameters.namespace
                toFieldPath: spec.forProvider.manifest.metadata.namespace
                type: FromCompositeFieldPath
              - fromFieldPath: spec.id
                toFieldPath: spec.forProvider.manifest.metadata.labels.app
                type: FromCompositeFieldPath
              - fromFieldPath: metadata.annotations
                toFieldPath: spec.forProvider.manifest.metadata.annotations
                type: FromCompositeFieldPath
              - fromFieldPath: spec.id
                toFieldPath: spec.forProvider.manifest.spec.selector.app
                type: FromCompositeFieldPath
              - fromFieldPath: spec.parameters.port
                toFieldPath: spec.forProvider.manifest.spec.ports[0].port
                type: FromCompositeFieldPath
              - fromFieldPath: spec.parameters.port
                toFieldPath: spec.forProvider.manifest.spec.ports[0].targetPort
                type: FromCompositeFieldPath
              - fromFieldPath: spec.id
                toFieldPath: spec.providerConfigRef.name
                type: FromCompositeFieldPath
            readinessChecks:
              - type: None
    - step: namespaces
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        inline:
          template: >-
            {{ range .observed.composite.resource.spec.parameters.namespaces }}

            ---

            apiVersion: kubernetes.crossplane.io/v1alpha2

            kind: Object

            metadata:


              name: {{ $.observed.composite.resource.spec.id }}-ns-{{ . }}
              annotations:
                crossplane.io/external-name: {{ . }}             
                gotemplating.fn.crossplane.io/composition-resource-name: {{ $.observed.composite.resource.spec.id }}-ns-{{ . }}
            spec:


              forProvider:
                manifest:
                  apiVersion: "v1"
                  kind: "Namespace"
                  metadata:
                    name: {{ . }}
              providerConfigRef:
                name: {{ $.observed.composite.resource.spec.id }}
            {{ end }}
        kind: GoTemplate
        source: Inline
    - step: automatically-detect-ready-composed-resources
      functionRef:
        name: function-auto-ready
